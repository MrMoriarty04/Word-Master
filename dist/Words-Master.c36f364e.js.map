{"mappings":"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","sources":["index.js"],"sourcesContent":["const letters=document.querySelectorAll('.letter-field');\nconst loadingDiv=document.querySelector('.info-bar'); \nconst MAX_WORD_LENGTH=5;\nconst Max_ROUND=6;\n\nasync function init() {\n    let currentGuess=``;\n    let currentRow=0;\n\n    const response=await fetch(\"https://words.dev-apis.com/word-of-the-day?random=1\");\n    const responseObject= await response.json();\n    const word = responseObject.word.toUpperCase();\n    const wordSplit=word.split(\"\");\n    let done = false;\n    console.log(word);\n    setLoading(false);\n\n        function letterInsert(letter){\n            if(currentGuess.length<MAX_WORD_LENGTH)\n                currentGuess+=letter;\n            else\n                currentGuess=currentGuess.substring(0,currentGuess.length-1)+letter;\n            \n        \n            letters[(MAX_WORD_LENGTH*currentRow)+currentGuess.length-1].innerText=letter;\n        }\n        \n\n       async function submit(){\n            if(currentGuess.length!== MAX_WORD_LENGTH)\n                return ;\n\n            setLoading(true);\n            const validWord = await sendResponse(currentGuess);\n            setLoading(false);\n\n            if(!validWord){\n                markInvalidWord();\n                return ;\n            }\n\n\n            const guessSplit=currentGuess.split(\"\");\n            const map=makeMap(wordSplit);\n\n\n            for(let i=0;i<MAX_WORD_LENGTH;i++){\n                if(guessSplit[i]===wordSplit[i]){\n                    letters[MAX_WORD_LENGTH*currentRow+i].classList.add(\"correct\");\n                    map[guessSplit[i]]--;\n\n                }\n\n            }\n            if(currentGuess===word){\n                alert(\"you won!!!\");\n                document.querySelector('.header').classList.add(\"winner\");\n                done=true;\n                return;\n            }\n\n\n\n            for(let i=0;i<MAX_WORD_LENGTH;i++){\n                if(guessSplit[i]===wordSplit[i])\n                    continue;\n                else if(wordSplit.includes(guessSplit[i]) && map[guessSplit[i]]>0){\n                    letters[MAX_WORD_LENGTH*currentRow+i].classList.add(\"close\");\n                    map[guessSplit[i]]--;\n                }\n                else\n                letters[MAX_WORD_LENGTH*currentRow+i].classList.add(\"wrong\");\n            }\n\n\n            \n            currentRow++;\n            currentGuess=``;\n\n            if(currentRow==Max_ROUND){\n                alert(`you lose the word was ${word}`);\n                done=true;\n            } \n        }\n        \n\n\n        function backSpace(){\n            currentGuess=currentGuess.substring(0,currentGuess.length-1);\n            letters[(MAX_WORD_LENGTH*currentRow)+currentGuess.length].innerText=\"\";\n        }\n    \n\n        \n        function markInvalidWord(){\n\n            for(let i=0;i<MAX_WORD_LENGTH;i++){\n                letters[MAX_WORD_LENGTH*currentRow+i].classList.remove(\"invalid\");\n                setTimeout(function(){\n                    letters[MAX_WORD_LENGTH*currentRow+i].classList.add(\"invalid\");\n                },10);\n            }\n\n\n        }\n\n    document.addEventListener('keydown',function handleKeyPress(event){\n        \n        if(!loadingDiv || done)\n            return;\n\n        const action = event.key;\n        if(action === 'Enter'){\n            submit();\n        }\n        else if(action === 'Backspace'){\n            backSpace();\n        }\n        else if(isLetter(action)){\n            letterInsert(action.toUpperCase());\n        }\n    });\n\n}\n\n\nfunction isLetter(letter) {\n    return /^[a-zA-Z]$/.test(letter);\n  }\n\nfunction setLoading(isLoading){\n\n    loadingDiv.classList.toggle('hidden',!isLoading);\n\n  }\n\n  function makeMap(array) {\n    const obj = {};\n    for (let i = 0; i < array.length; i++) {\n      if (obj[array[i]]) {\n        obj[array[i]]++;\n      } else {\n        obj[array[i]] = 1;\n      }\n    }\n    return obj;\n  }\n  \n\n  async function sendResponse(currentGuess){\n    const sendResponse= await fetch (\"https://words.dev-apis.com/validate-word\",\n        {   method: \"POST\",\n            body: JSON.stringify({word:currentGuess}),\n        });\n    const resObj=await sendResponse.json();\n    const validWord=resObj.validWord;\n    \n    return validWord;\n  }\n\ninit();"],"names":[],"version":3,"file":"Words-Master.c36f364e.js.map","sourceRoot":"/__parcel_source_root/"}